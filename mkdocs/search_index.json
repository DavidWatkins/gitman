{
    "docs": [
        {
            "location": "/",
            "text": "Git Dependency Manager\n\n\nGitMan is a language-agnostic \"dependency manager\" using Git. It aims to serve as a submodules replacement and provides advanced options for managing versions of nested Git repositories.\n\n\nRequirements\n\n\n\n\nPython 3.5+\n\n\nGit 1.8+ (with \nstored credentials\n)\n\n\nUnix shell (or Cygwin/MinGW/etc. on Windows)\n\n\n\n\nInstallation\n\n\nGitMan can be installed with pip:\n\n\n$ pip install gitman\n\n\n\n\nor directly from the source code:\n\n\n$ git clone https://github.com/jacebrowning/gitman.git\n$ cd gitman\n$ python setup.py install\n\n\n\n\nSetup\n\n\nCreate a configuration file (\ngitman.yml\n or \n.gitman.yml\n) in the root of your working tree:\n\n\nlocation: vendor\nsources:\n- name: framework\n  repo: https://github.com/kstenerud/iOS-Universal-Framework\n  rev: Mk5-end-of-life\n- name: coverage\n  repo: https://github.com/jonreid/XcodeCoverage\n  rev: master\n  link: Tools/XcodeCoverage\n\n\n\n\nIgnore the dependency storage location:\n\n\n$ echo vendor >> .gitignore\n\n\n\n\nBasic Usage\n\n\nGet all dependencies:\n\n\n$ gitman install\n\n\n\n\nwhich will essentially:\n\n\n\n\ncreate a working tree at \nroot\n/\nlocation\n/\nname\n\n\nfetch from \nrepo\n and checkout the specified \nrev\n\n\nsymbolically link each \nlocation\n/\nname\n from \nroot\n/\nlink\n (if specified)\n\n\nrepeat for all nested working trees containing a configuration file\n\n\n\n\nwhere \nrev\n can be:\n\n\n\n\nall or part of a commit SHA: \n123def\n\n\na tag: \nv1.0\n\n\na branch: \nmaster\n\n\na \nrev-parse\n date: \n'develop@{2015-06-18 10:30:59}'",
            "title": "Home"
        },
        {
            "location": "/#git-dependency-manager",
            "text": "GitMan is a language-agnostic \"dependency manager\" using Git. It aims to serve as a submodules replacement and provides advanced options for managing versions of nested Git repositories.",
            "title": "Git Dependency Manager"
        },
        {
            "location": "/#requirements",
            "text": "Python 3.5+  Git 1.8+ (with  stored credentials )  Unix shell (or Cygwin/MinGW/etc. on Windows)",
            "title": "Requirements"
        },
        {
            "location": "/#installation",
            "text": "GitMan can be installed with pip:  $ pip install gitman  or directly from the source code:  $ git clone https://github.com/jacebrowning/gitman.git\n$ cd gitman\n$ python setup.py install",
            "title": "Installation"
        },
        {
            "location": "/#setup",
            "text": "Create a configuration file ( gitman.yml  or  .gitman.yml ) in the root of your working tree:  location: vendor\nsources:\n- name: framework\n  repo: https://github.com/kstenerud/iOS-Universal-Framework\n  rev: Mk5-end-of-life\n- name: coverage\n  repo: https://github.com/jonreid/XcodeCoverage\n  rev: master\n  link: Tools/XcodeCoverage  Ignore the dependency storage location:  $ echo vendor >> .gitignore",
            "title": "Setup"
        },
        {
            "location": "/#basic-usage",
            "text": "Get all dependencies:  $ gitman install  which will essentially:   create a working tree at  root / location / name  fetch from  repo  and checkout the specified  rev  symbolically link each  location / name  from  root / link  (if specified)  repeat for all nested working trees containing a configuration file   where  rev  can be:   all or part of a commit SHA:  123def  a tag:  v1.0  a branch:  master  a  rev-parse  date:  'develop@{2015-06-18 10:30:59}'",
            "title": "Basic Usage"
        },
        {
            "location": "/setup/git/",
            "text": "Git Setup\n\n\nIn order for \ngitman\n to interact with Git, it must be configured to store your credentials for private repository access.\n\n\nTo test, trying cloning one of your private repositories:\n\n\n$ git clone https://github.com/<owner>/<repo>.git\n\n\n\n\nIf you see:\n\n\nUsername for 'https://github.com':\n\n\n\n\nthen credential storage is not set up correctly.\n\n\nStored Credentials\n\n\nTo use the Keychain manager on OS X, run:\n\n\n$ git config --global credential.helper osxkeychain\n\n\n\n\nTo use the Credential Manager on Windows run:\n\n\n$ git config --global credential.helper wincred\n\n\n\n\nIf you're using two-factory authentication on GitHub, you'll need to \nprovide a personal access token\n instead of your password.\n\n\nSSH Keys\n\n\nYou can also set up SSH keys (for \nGitHub\n) and use a different URL:\n\n\n$ git clone git://github.com/<owner>/<repo>.git\n\n\n\n\nOAuth Tokens\n\n\nFinally, the repository URL itself can contain an OAuth token (for \nGitHub\n):\n\n\n$ git clone https://<token>@github.com/<owner>/<repo>.git\n\n\n\n\nThe token can also be written to \n.netrc\n during builds, see the guide for \nTravis CI\n.",
            "title": "Git"
        },
        {
            "location": "/setup/git/#git-setup",
            "text": "In order for  gitman  to interact with Git, it must be configured to store your credentials for private repository access.  To test, trying cloning one of your private repositories:  $ git clone https://github.com/<owner>/<repo>.git  If you see:  Username for 'https://github.com':  then credential storage is not set up correctly.",
            "title": "Git Setup"
        },
        {
            "location": "/setup/git/#stored-credentials",
            "text": "To use the Keychain manager on OS X, run:  $ git config --global credential.helper osxkeychain  To use the Credential Manager on Windows run:  $ git config --global credential.helper wincred  If you're using two-factory authentication on GitHub, you'll need to  provide a personal access token  instead of your password.",
            "title": "Stored Credentials"
        },
        {
            "location": "/setup/git/#ssh-keys",
            "text": "You can also set up SSH keys (for  GitHub ) and use a different URL:  $ git clone git://github.com/<owner>/<repo>.git",
            "title": "SSH Keys"
        },
        {
            "location": "/setup/git/#oauth-tokens",
            "text": "Finally, the repository URL itself can contain an OAuth token (for  GitHub ):  $ git clone https://<token>@github.com/<owner>/<repo>.git  The token can also be written to  .netrc  during builds, see the guide for  Travis CI .",
            "title": "OAuth Tokens"
        },
        {
            "location": "/interfaces/cli/",
            "text": "Command-line Interface\n\n\nAfter setting up \ngitman\n with a \nconfiguration file\n, various commands can be run to manage these Git-controlled source dependencies.\n\n\nInstall\n\n\nTo clone/checkout the specified dependencies, run:\n\n\ngitman install\n\n\n\n\nor filter the dependency list by directory name:\n\n\ngitman install <name1> <name2> <etc.>\n\n\n\n\nor limit the traversal of nested dependencies:\n\n\ngitman install --depth=<count>\n\n\n\n\nIt will leave untracked files alone. To delete them, run:\n\n\ngitman install --clean\n\n\n\n\nIt will only fetch from the repository if needed. To always fetch, run:\n\n\ngitman install --fetch\n\n\n\n\nIt will exit with an error if there are any uncommitted changes in dependencies. To overwrite all changes, run:\n\n\ngitman install --force\n\n\n\n\nUpdate\n\n\nIf any of the dependencies track a branch (rather than a specific commit), the current upstream version of that branch can be checked out by running:\n\n\ngitman update\n\n\n\n\nor filter the dependency list by directory name:\n\n\ngitman update <name1> <name2> <etc.>\n\n\n\n\nor limit the traversal of nested dependencies:\n\n\ngitman update --depth=<count>\n\n\n\n\nThis will also record the exact versions of any previously locked dependencies. Disable this behavior by instead running:\n\n\ngitman update --no-lock\n\n\n\n\nor to additionally get the latest versions of all nested dependencies, run:\n\n\ngitman update --all\n\n\n\n\nList\n\n\nTo display the currently checked out dependencies, run:\n\n\ngitman list\n\n\n\n\nor exit with an error if there are any uncommitted changes:\n\n\ngitman list --no-dirty\n\n\n\n\nThe \nlist\n command will also record versions in the log file.\n\n\nLock\n\n\nTo manually record the exact version of each dependency, run:\n\n\ngitman lock\n\n\n\n\nor lock down specific dependencies:\n\n\ngitman lock <name1> <name2> <etc.>\n\n\n\n\nThis can be combined with updating dependencies by running:\n\n\ngitman update --lock\n\n\n\n\nTo restore the exact versions previously checked out, run:\n\n\ngitman install\n\n\n\n\nUninstall\n\n\nTo delete all dependencies, run:\n\n\ngitman uninstall\n\n\n\n\nIf any dependencies contain uncommitted changes, instead run:\n\n\ngitman uninstall --force\n\n\n\n\nShow\n\n\nTo display the path to the dependency storage location:\n\n\ngitman show\n\n\n\n\nTo display the path to a dependency:\n\n\ngitman show <name>\n\n\n\n\nTo display the path to the configuration file:\n\n\ngitman show --config\n\n\n\n\nTo display the path to the log file:\n\n\ngitman show --log\n\n\n\n\nEdit\n\n\nTo open the existing configuration file:\n\n\ngitman edit",
            "title": "Command Line"
        },
        {
            "location": "/interfaces/cli/#command-line-interface",
            "text": "After setting up  gitman  with a  configuration file , various commands can be run to manage these Git-controlled source dependencies.",
            "title": "Command-line Interface"
        },
        {
            "location": "/interfaces/cli/#install",
            "text": "To clone/checkout the specified dependencies, run:  gitman install  or filter the dependency list by directory name:  gitman install <name1> <name2> <etc.>  or limit the traversal of nested dependencies:  gitman install --depth=<count>  It will leave untracked files alone. To delete them, run:  gitman install --clean  It will only fetch from the repository if needed. To always fetch, run:  gitman install --fetch  It will exit with an error if there are any uncommitted changes in dependencies. To overwrite all changes, run:  gitman install --force",
            "title": "Install"
        },
        {
            "location": "/interfaces/cli/#update",
            "text": "If any of the dependencies track a branch (rather than a specific commit), the current upstream version of that branch can be checked out by running:  gitman update  or filter the dependency list by directory name:  gitman update <name1> <name2> <etc.>  or limit the traversal of nested dependencies:  gitman update --depth=<count>  This will also record the exact versions of any previously locked dependencies. Disable this behavior by instead running:  gitman update --no-lock  or to additionally get the latest versions of all nested dependencies, run:  gitman update --all",
            "title": "Update"
        },
        {
            "location": "/interfaces/cli/#list",
            "text": "To display the currently checked out dependencies, run:  gitman list  or exit with an error if there are any uncommitted changes:  gitman list --no-dirty  The  list  command will also record versions in the log file.",
            "title": "List"
        },
        {
            "location": "/interfaces/cli/#lock",
            "text": "To manually record the exact version of each dependency, run:  gitman lock  or lock down specific dependencies:  gitman lock <name1> <name2> <etc.>  This can be combined with updating dependencies by running:  gitman update --lock  To restore the exact versions previously checked out, run:  gitman install",
            "title": "Lock"
        },
        {
            "location": "/interfaces/cli/#uninstall",
            "text": "To delete all dependencies, run:  gitman uninstall  If any dependencies contain uncommitted changes, instead run:  gitman uninstall --force",
            "title": "Uninstall"
        },
        {
            "location": "/interfaces/cli/#show",
            "text": "To display the path to the dependency storage location:  gitman show  To display the path to a dependency:  gitman show <name>  To display the path to the configuration file:  gitman show --config  To display the path to the log file:  gitman show --log",
            "title": "Show"
        },
        {
            "location": "/interfaces/cli/#edit",
            "text": "To open the existing configuration file:  gitman edit",
            "title": "Edit"
        },
        {
            "location": "/interfaces/plugin/",
            "text": "Git Plugin\n\n\ngitman\n offers a simplified version of the \ncommand-line interface\n in the form of a plugin for Git.\n\n\nInstall\n\n\nTo clone/checkout the specified dependencies, run:\n\n\ngit deps\n\n\n\n\nDelete all untracked files in dependencies by instead running:\n\n\ngit deps --clean\n\n\n\n\nGit will exit with an error if there are any uncommitted changes in dependencies. To overwrite all changes, run:\n\n\ngit deps --force\n\n\n\n\nUpdate\n\n\nIf any of the dependencies track a branch (rather than a specific commit), the current upstream version of that branch can be checked out by running:\n\n\ngit deps --update\n\n\n\n\nThis will also record the exact versions that were checked out. Disable this behavior by instead running:\n\n\ngit deps --update --no-lock\n\n\n\n\nOr, to additionally get the latest versions of all nested dependencies, run:\n\n\ngit deps --update --all\n\n\n\n\nTo restore the exact versions previously checked out, run:\n\n\ngit deps\n\n\n\n\nList\n\n\nTo display the currently checked out dependencies, run:\n\n\ngit deps --list\n\n\n\n\nUninstall\n\n\nTo delete all dependencies, run:\n\n\ngit deps --uninstall\n\n\n\n\nIf any dependencies contain uncommitted changes, instead run:\n\n\ngit deps --uninstall --force",
            "title": "Git Plugin"
        },
        {
            "location": "/interfaces/plugin/#git-plugin",
            "text": "gitman  offers a simplified version of the  command-line interface  in the form of a plugin for Git.",
            "title": "Git Plugin"
        },
        {
            "location": "/interfaces/plugin/#install",
            "text": "To clone/checkout the specified dependencies, run:  git deps  Delete all untracked files in dependencies by instead running:  git deps --clean  Git will exit with an error if there are any uncommitted changes in dependencies. To overwrite all changes, run:  git deps --force",
            "title": "Install"
        },
        {
            "location": "/interfaces/plugin/#update",
            "text": "If any of the dependencies track a branch (rather than a specific commit), the current upstream version of that branch can be checked out by running:  git deps --update  This will also record the exact versions that were checked out. Disable this behavior by instead running:  git deps --update --no-lock  Or, to additionally get the latest versions of all nested dependencies, run:  git deps --update --all  To restore the exact versions previously checked out, run:  git deps",
            "title": "Update"
        },
        {
            "location": "/interfaces/plugin/#list",
            "text": "To display the currently checked out dependencies, run:  git deps --list",
            "title": "List"
        },
        {
            "location": "/interfaces/plugin/#uninstall",
            "text": "To delete all dependencies, run:  git deps --uninstall  If any dependencies contain uncommitted changes, instead run:  git deps --uninstall --force",
            "title": "Uninstall"
        },
        {
            "location": "/interfaces/api/",
            "text": "Package API\n\n\nAll of the \ncommand-line interface\n functionality is available from the Python package by importing \ngitman\n.\n\n\nInstall\n\n\nTo clone/checkout the specified dependencies, call:\n\n\ngitman.install(*names, root=None, depth=None, force=False, fetch=False, clean=True)\n\n\n\n\nwith optional arguments:\n\n\n\n\n*names\n: optional list of dependency directory names to filter on\n\n\nroot\n: specifies the path to the root working tree\n\n\ndepth\n: number of levels of dependencies to traverse\n\n\nforce\n: indicates uncommitted changes can be overwritten\n\n\nfetch\n: indicates the latest branches should always be fetched\n\n\nclean\n: indicates untracked files should be deleted from dependencies\n\n\n\n\nUpdate\n\n\nIf any of the dependencies track a branch (rather than a specific commit), the current upstream version of that branch can be checked out by calling:\n\n\ngitman.update(*names, root=None, depth=None, recurse=False, force=False, clean=True, lock=None)\n\n\n\n\nwith optional arguments:\n\n\n\n\n*names\n: optional list of dependency directory names to filter on\n\n\nroot\n: specifies the path to the root working tree\n\n\ndepth\n: number of levels of dependencies to traverse\n\n\nrecurse\n: indicates nested dependencies should also be updated\n\n\nforce\n: indicates uncommitted changes can be overwritten\n\n\nclean\n: indicates untracked files should be deleted from dependencies\n\n\nlock\n: indicates actual dependency versions should be recorded\n\n\n\n\nList\n\n\nTo display the currently checked out dependencies, call:\n\n\ngitman.list(root=None, depth=None, allow_dirty=True)\n\n\n\n\nwith optional arguments:\n\n\n\n\nroot\n: specifies the path to the root working tree\n\n\ndepth\n: number of levels of dependencies to traverse\n\n\nallow_dirty\n: causes uncommitted changes to be ignored\n\n\n\n\nLock\n\n\nTo record the exact versions of currently checked out dependencies, call:\n\n\ngitman.lock(*names, root=None)\n\n\n\n\nwith optional arguments:\n\n\n\n\n*names\n: optional list of dependency directory names to filter on\n\n\nroot\n: specifies the path to the root working tree\n\n\n\n\nUninstall\n\n\nTo delete all dependencies, call:\n\n\ngitman.uninstall(root=None, force=False)\n\n\n\n\nwith optional arguments:\n\n\n\n\nroot\n: specifies the path to the root working tree\n\n\nforce\n: indicates uncommitted changes can be overwritten",
            "title": "Package API"
        },
        {
            "location": "/interfaces/api/#package-api",
            "text": "All of the  command-line interface  functionality is available from the Python package by importing  gitman .",
            "title": "Package API"
        },
        {
            "location": "/interfaces/api/#install",
            "text": "To clone/checkout the specified dependencies, call:  gitman.install(*names, root=None, depth=None, force=False, fetch=False, clean=True)  with optional arguments:   *names : optional list of dependency directory names to filter on  root : specifies the path to the root working tree  depth : number of levels of dependencies to traverse  force : indicates uncommitted changes can be overwritten  fetch : indicates the latest branches should always be fetched  clean : indicates untracked files should be deleted from dependencies",
            "title": "Install"
        },
        {
            "location": "/interfaces/api/#update",
            "text": "If any of the dependencies track a branch (rather than a specific commit), the current upstream version of that branch can be checked out by calling:  gitman.update(*names, root=None, depth=None, recurse=False, force=False, clean=True, lock=None)  with optional arguments:   *names : optional list of dependency directory names to filter on  root : specifies the path to the root working tree  depth : number of levels of dependencies to traverse  recurse : indicates nested dependencies should also be updated  force : indicates uncommitted changes can be overwritten  clean : indicates untracked files should be deleted from dependencies  lock : indicates actual dependency versions should be recorded",
            "title": "Update"
        },
        {
            "location": "/interfaces/api/#list",
            "text": "To display the currently checked out dependencies, call:  gitman.list(root=None, depth=None, allow_dirty=True)  with optional arguments:   root : specifies the path to the root working tree  depth : number of levels of dependencies to traverse  allow_dirty : causes uncommitted changes to be ignored",
            "title": "List"
        },
        {
            "location": "/interfaces/api/#lock",
            "text": "To record the exact versions of currently checked out dependencies, call:  gitman.lock(*names, root=None)  with optional arguments:   *names : optional list of dependency directory names to filter on  root : specifies the path to the root working tree",
            "title": "Lock"
        },
        {
            "location": "/interfaces/api/#uninstall",
            "text": "To delete all dependencies, call:  gitman.uninstall(root=None, force=False)  with optional arguments:   root : specifies the path to the root working tree  force : indicates uncommitted changes can be overwritten",
            "title": "Uninstall"
        },
        {
            "location": "/use-cases/submodules/",
            "text": "Replacing Git Submodules\n\n\nWhile Git \nsubmodules\n are an obvious choice to include a particular version of another repository in yours, they end up being far less flexible when one needs to track branches or frequently switch between multiple versions of dependencies.\n\n\nAn Existing Submodule\n\n\nWhen managing a single dependency using submodules, there will be two items in your working tree with special meaning. The \n.gitmodules\n file, which contains submodule configuration, and semi-ignored directory containing the checked out dependency:\n\n\n<root>/vendor/my_dependency  # submodule at: a943a702d06f34599aee1f8da8ef9f7296031d69\n\n\n\n\nUsing Git in the outer working tree will essentially ignore the contents of the nested working tree, but will still complain if there are changes locally or the submodule's origin has changes.\n\n\nMimicking Submodules\n\n\nTo get the same behavior using \ngitman\n, first delete the \n.gitmodules\n file and create a new \n.gitman.yml\n:\n\n\nlocation: .gitman\nsources:\n- name: my_dependency\n  repo: <URL of my_dependency's repository>\n  rev: a943a702d06f34599aee1f8da8ef9f7296031d69\n  link: vendor/my_depenendy\n\n\n\n\nAdd \n.gitman\n to your \n.gitignore\n file and overwrite the old submodule location by running:\n\n\ngitman install --force\n\n\n\n\nNow \n<root>/vendor/my_dependency\n will be a symbolic link that points to an ignored working tree of \nmy_dependency\n at revision \na943a7\n.\n\n\nGetting Dependencies\n\n\nIn other working trees, simply run \n$ gitman install\n to check out the source dependencies of your project.\n\n\nModifying Dependencies\n\n\nTo include a different version of a dependency, modify the \nrev\n value in the configuration file.",
            "title": "Replacing Submodules"
        },
        {
            "location": "/use-cases/submodules/#replacing-git-submodules",
            "text": "While Git  submodules  are an obvious choice to include a particular version of another repository in yours, they end up being far less flexible when one needs to track branches or frequently switch between multiple versions of dependencies.",
            "title": "Replacing Git Submodules"
        },
        {
            "location": "/use-cases/submodules/#an-existing-submodule",
            "text": "When managing a single dependency using submodules, there will be two items in your working tree with special meaning. The  .gitmodules  file, which contains submodule configuration, and semi-ignored directory containing the checked out dependency:  <root>/vendor/my_dependency  # submodule at: a943a702d06f34599aee1f8da8ef9f7296031d69  Using Git in the outer working tree will essentially ignore the contents of the nested working tree, but will still complain if there are changes locally or the submodule's origin has changes.",
            "title": "An Existing Submodule"
        },
        {
            "location": "/use-cases/submodules/#mimicking-submodules",
            "text": "To get the same behavior using  gitman , first delete the  .gitmodules  file and create a new  .gitman.yml :  location: .gitman\nsources:\n- name: my_dependency\n  repo: <URL of my_dependency's repository>\n  rev: a943a702d06f34599aee1f8da8ef9f7296031d69\n  link: vendor/my_depenendy  Add  .gitman  to your  .gitignore  file and overwrite the old submodule location by running:  gitman install --force  Now  <root>/vendor/my_dependency  will be a symbolic link that points to an ignored working tree of  my_dependency  at revision  a943a7 .",
            "title": "Mimicking Submodules"
        },
        {
            "location": "/use-cases/submodules/#getting-dependencies",
            "text": "In other working trees, simply run  $ gitman install  to check out the source dependencies of your project.",
            "title": "Getting Dependencies"
        },
        {
            "location": "/use-cases/submodules/#modifying-dependencies",
            "text": "To include a different version of a dependency, modify the  rev  value in the configuration file.",
            "title": "Modifying Dependencies"
        },
        {
            "location": "/use-cases/branch-tracking/",
            "text": "Tracking Branches in Dependencies\n\n\nOne common use case of \ngitman\n is to track versions of related product sub-components such as a web app that depends on an API.\n\n\nSample Configuration\n\n\nA web app's \ngitman.yml\n might look something like:\n\n\nlocation: vendor\nsources:\n- name: api\n  repo: https://github.com/example/api\n  rev: develop\nsources_locked:\n- name: api\n  repo: https://github.com/example/api\n  rev: b2730855c9efaaa7448b25b82e5a4363785c83ed\n\n\n\n\nwith a working tree that results in something like:\n\n\npackage.json\nnode_modules\n\ngitman.yml\nvendor/api  # dependency @ b27308\n\napp\ntests\n\n\n\n\nUnderstanding Locked Sources\n\n\nIn the configuration file, the \nsources_locked\n section identifies that commit \nb27308\n of the API was last used to test this web app -- the last time \n$ gitman update\n was run.\n\n\nThe \nsources\n section identifies that the \ndevelop\n branch should be used when checking out a new version of the API.\n\n\nDevelopment Workflow\n\n\n\n\nRun \n$ gitman install\n during continuous integration to test the web app against a known working API\n\n\nRun \n$ gitman update\n locally to determine if newer versions of the API will break the web app\n\n\nWhen both components are working together, commit \ngitman.yml",
            "title": "Tracking Branches"
        },
        {
            "location": "/use-cases/branch-tracking/#tracking-branches-in-dependencies",
            "text": "One common use case of  gitman  is to track versions of related product sub-components such as a web app that depends on an API.",
            "title": "Tracking Branches in Dependencies"
        },
        {
            "location": "/use-cases/branch-tracking/#sample-configuration",
            "text": "A web app's  gitman.yml  might look something like:  location: vendor\nsources:\n- name: api\n  repo: https://github.com/example/api\n  rev: develop\nsources_locked:\n- name: api\n  repo: https://github.com/example/api\n  rev: b2730855c9efaaa7448b25b82e5a4363785c83ed  with a working tree that results in something like:  package.json\nnode_modules\n\ngitman.yml\nvendor/api  # dependency @ b27308\n\napp\ntests",
            "title": "Sample Configuration"
        },
        {
            "location": "/use-cases/branch-tracking/#understanding-locked-sources",
            "text": "In the configuration file, the  sources_locked  section identifies that commit  b27308  of the API was last used to test this web app -- the last time  $ gitman update  was run.  The  sources  section identifies that the  develop  branch should be used when checking out a new version of the API.",
            "title": "Understanding Locked Sources"
        },
        {
            "location": "/use-cases/branch-tracking/#development-workflow",
            "text": "Run  $ gitman install  during continuous integration to test the web app against a known working API  Run  $ gitman update  locally to determine if newer versions of the API will break the web app  When both components are working together, commit  gitman.yml",
            "title": "Development Workflow"
        },
        {
            "location": "/use-cases/linked-features/",
            "text": "Linking Related Feature Branches\n\n\nAnother use case of \ngitman\n is to test experimental versions of related product sub-components. In the \nweb app + API example\n, a new feature might require changes in both the API and web app.\n\n\nCustom Locked Sources\n\n\nBy manually modifying the \nsources_locked\n section, a particular version of the API can be checked out to help finish the complete feature in the web app:\n\n\nlocation: vendor\nsources:\n- name: api\n  repo: https://github.com/example/api\n  rev: develop\nsources_locked:\n- name: api\n  repo: https://github.com/example/api\n  rev: feature/authenticate-with-github  # related feature branch in the API\n\n\n\n\nIf this modified \ngitman.yml\n is committed to a corresponding feature branch in the web app, others will be able to create a similar working tree to collaborate on the feature.\n\n\nDevelopment Workflow\n\n\n\n\nRun \n$ gitman install\n during continuous integration and locally to test the web app against the proposed API changes\n\n\nCommit \ngitman.yml\n to share this feature branch with others\n\n\nWhen the feature is complete, merge the API feature branch first\n\n\nRun \n$ gitman update\n to reset \ngitman.yml\n back to a tracking a specific commit",
            "title": "Linking Feature Branches"
        },
        {
            "location": "/use-cases/linked-features/#linking-related-feature-branches",
            "text": "Another use case of  gitman  is to test experimental versions of related product sub-components. In the  web app + API example , a new feature might require changes in both the API and web app.",
            "title": "Linking Related Feature Branches"
        },
        {
            "location": "/use-cases/linked-features/#custom-locked-sources",
            "text": "By manually modifying the  sources_locked  section, a particular version of the API can be checked out to help finish the complete feature in the web app:  location: vendor\nsources:\n- name: api\n  repo: https://github.com/example/api\n  rev: develop\nsources_locked:\n- name: api\n  repo: https://github.com/example/api\n  rev: feature/authenticate-with-github  # related feature branch in the API  If this modified  gitman.yml  is committed to a corresponding feature branch in the web app, others will be able to create a similar working tree to collaborate on the feature.",
            "title": "Custom Locked Sources"
        },
        {
            "location": "/use-cases/linked-features/#development-workflow",
            "text": "Run  $ gitman install  during continuous integration and locally to test the web app against the proposed API changes  Commit  gitman.yml  to share this feature branch with others  When the feature is complete, merge the API feature branch first  Run  $ gitman update  to reset  gitman.yml  back to a tracking a specific commit",
            "title": "Development Workflow"
        },
        {
            "location": "/use-cases/build-integration/",
            "text": "Build System Integration\n\n\nGitMan can be invoked from your build system or continuous integration environment. It provides a convenient way to access its internal file and directory paths using the \nshow\n command.\n\n\nMakefile\n\n\nThe following example shows one way you might want to call \ngitman\n from within a Makefile:\n\n\n.PHONY: all\nall: depends\n\n.PHONY: depends\ndepends: $(shell gitman show --log)\n$(shell gitman show --log): $(shell gitman show --config)\n    gitman install\n    make -C $(shell gitman show lib_foo) configure all install\n    make -C $(shell gitman show lib_bar) configure all install\n    gitman list\n\n.PHONY: clean\nclean:\n  gitman uninstall\n\n\n\n\nusing a configuration file similar to:\n\n\nlocation: vendor\nsources:\n- name: lib_foo\n  repo: https://github.com/example/lib_foo\n  rev: develop\n- name: lib_bar\n  repo: https://github.com/example/lib_bar\n  rev: master\nsources_locked:\n- name: lib_foo\n  repo: https://github.com/example/lib_foo\n  rev: 73cb3668d4c9c3388fb21de16c9c3f6217cc0e1c\n- name: lib_bar\n  repo: https://github.com/example/lib_bar\n  rev: 560ea99953a4b3e393e170e07895d14904eb032c\n\n\n\n\nWorkflow\n\n\nRunning \nmake depends\n performs the following actions:\n\n\n\n\nCheck the modification times of the configuration and log files\n\n\nIf the configuration file is newer, continue\n\n\nInstall the locked dependency versions\n\n\nRun \nmake\n inside of each dependency's folder\n\n\nUpdate the log file with the current versions of all dependencies\n\n\n\n\nTo update your dependencies:\n\n\n\n\nRun \ngitman update\n\n\nRun \nmake depends\n\n\nIf the new build passes your tests, commit the new configuration file",
            "title": "Build System Integration"
        },
        {
            "location": "/use-cases/build-integration/#build-system-integration",
            "text": "GitMan can be invoked from your build system or continuous integration environment. It provides a convenient way to access its internal file and directory paths using the  show  command.",
            "title": "Build System Integration"
        },
        {
            "location": "/use-cases/build-integration/#makefile",
            "text": "The following example shows one way you might want to call  gitman  from within a Makefile:  .PHONY: all\nall: depends\n\n.PHONY: depends\ndepends: $(shell gitman show --log)\n$(shell gitman show --log): $(shell gitman show --config)\n    gitman install\n    make -C $(shell gitman show lib_foo) configure all install\n    make -C $(shell gitman show lib_bar) configure all install\n    gitman list\n\n.PHONY: clean\nclean:\n  gitman uninstall  using a configuration file similar to:  location: vendor\nsources:\n- name: lib_foo\n  repo: https://github.com/example/lib_foo\n  rev: develop\n- name: lib_bar\n  repo: https://github.com/example/lib_bar\n  rev: master\nsources_locked:\n- name: lib_foo\n  repo: https://github.com/example/lib_foo\n  rev: 73cb3668d4c9c3388fb21de16c9c3f6217cc0e1c\n- name: lib_bar\n  repo: https://github.com/example/lib_bar\n  rev: 560ea99953a4b3e393e170e07895d14904eb032c",
            "title": "Makefile"
        },
        {
            "location": "/use-cases/build-integration/#workflow",
            "text": "Running  make depends  performs the following actions:   Check the modification times of the configuration and log files  If the configuration file is newer, continue  Install the locked dependency versions  Run  make  inside of each dependency's folder  Update the log file with the current versions of all dependencies   To update your dependencies:   Run  gitman update  Run  make depends  If the new build passes your tests, commit the new configuration file",
            "title": "Workflow"
        },
        {
            "location": "/about/changelog/",
            "text": "Revision History\n\n\n1.0.1 (2016/05/31)\n\n\n\n\nReplaced calls to \ngit remote add origin\n with \ngit remote set-url origin\n.\n\n\n\n\n1.0 (2016/05/22)\n\n\n\n\nInitial stable release.\n\n\n\n\n0.11 (2016/05/10)\n\n\n\n\nRemoved dependency on \nsh\n to support Cygwin/MinGW/etc. on Windows.\n\n\nDropped Python 3.4 support for \nsubprocess\n and \n*args\n improvements.\n\n\nBREAKING\n: Renamed config file key \ndir\n to \nname\n.\n\n\n\n\n0.10 (2016/04/14)\n\n\n\n\nAdded \nshow\n command to display dependency and internal paths.\n\n\n\n\n0.9 (2016/03/31)\n\n\n\n\nAdded \nedit\n command to launch the configuration file.\n\n\nDepth now defaults to 5 to prevent infinite recursion.\n\n\nFixed handling of source lists containing different dependencies.\n\n\n\n\n0.8.3 (2016/03/14)\n\n\n\n\nRenamed to GitMan.\n\n\n\n\n0.8.2 (2016/02/24)\n\n\n\n\nUpdated to YORM v0.6.\n\n\n\n\n0.8.1 (2016/01/21)\n\n\n\n\nAdded an error message when attempting to lock invalid repositories.\n\n\n\n\n0.8 (2016/01/13)\n\n\n\n\nSwitched to using repository mirrors to speed up cloning.\n\n\nDisabled automatic fetching on install.\n\n\nAdded \n--fetch\n option on \ninstall\n to always fetch.\n\n\nNow displaying \ngit status\n output when there are changes.\n\n\n\n\n0.7 (2015/12/22)\n\n\n\n\nFixed \ngit remote rm\n command (@hdnivara).\n\n\nNow applying the \nupdate\n dependency filter to locking as well.\n\n\nNow only locking previous locked dependencies.\n\n\nAdded \nlock\n command to manually save all dependency versions.\n\n\nNow requiring \n--lock\n option on \nupdate\n to explicitly lock dependencies.\n\n\n\n\n0.6 (2015/11/13)\n\n\n\n\nAdded the ability to filter the dependency list on \ninstall\n and \nupdate\n.\n\n\nAdded \n--depth\n option to limit dependency traversal on \ninstall\n, \nupdate\n, and \nlist\n.\n\n\n\n\n0.5 (2015/10/20)\n\n\n\n\nAdded Git plugin support via: \ngit deps\n.\n\n\nRemoved \n--no-clean\n option (now the default) on \ninstall\n and \nupdate\n.\n\n\nAdded \n--clean\n option to delete ignored files on \ninstall\n and \nupdate\n.\n\n\nSwitched to \ninstall\n rather than \nupdate\n of nested dependencies.\n\n\nAdded \n--all\n option on \nupdate\n to update all nested dependencies.\n\n\nDisabled warnings when running \ninstall\n without locked sources.\n\n\nAdded \n--no-lock\n option to disable version recording.\n\n\n\n\n0.4.2 (2015/10/18)\n\n\n\n\nFixed crash when running with some sources missing.\n\n\n\n\n0.4.1 (2015/09/24)\n\n\n\n\nSwitched to cloning for initial working tree creation.\n\n\n\n\n0.4 (2015/09/18)\n\n\n\n\nReplaced \ninstall\n command with \nupdate\n.\n\n\nUpdated \ninstall\n command to use locked dependency versions.\n\n\nNow sorting sources after a successful \nupdate\n.\n\n\nNow requiring \n--force\n to \nuninstall\n with uncommitted changes.\n\n\nUpdated \nlist\n command to show full shell commands.\n\n\n\n\n0.3.1 (2015/09/09)\n\n\n\n\nEnsures files are not needlessly reloaded with newer versions of YORM.\n\n\n\n\n0.3 (2015/06/26)\n\n\n\n\nAdded \n--no-clean\n option to disable removing untracked files.\n\n\nAdded support for \nrev-parse\n dates as the dependency \nrev\n.\n\n\n\n\n0.2.5 (2015/06/15)\n\n\n\n\nAdded \n--quiet\n option to hide warnings.\n\n\n\n\n0.2.4 (2015/05/19)\n\n\n\n\nNow hiding YORM logging bellow warnings.\n\n\n\n\n0.2.3 (2015/05/17)\n\n\n\n\nUpgraded to YORM v0.4.\n\n\n\n\n0.2.2 (2015/05/04)\n\n\n\n\nSpecified YORM < v0.4.\n\n\n\n\n0.2.1 (2015/03/12)\n\n\n\n\nAdded automatic remote branch tracking in dependencies.\n\n\nNow requiring \n--force\n when there are untracked files.\n\n\n\n\n0.2 (2015/03/10)\n\n\n\n\nAdded \nlist\n command to display current URLs/SHAs.\n\n\n\n\n0.1.4 (2014/02/27)\n\n\n\n\nFixed an outdated index when checking for changes.\n\n\n\n\n0.1.3 (2014/02/27)\n\n\n\n\nFixed extra whitespace when logging shell output.\n\n\n\n\n0.1.2 (2014/02/27)\n\n\n\n\nAdded \n--force\n argument to:\n\n\noverwrite uncommitted changes\n\n\ncreate symbolic links in place of directories\n\n\n\n\n\n\nAdded live shell command output with \n-vv\n argument.\n\n\n\n\n0.1 (2014/02/24)\n\n\n\n\nInitial release.",
            "title": "Release Notes"
        },
        {
            "location": "/about/changelog/#revision-history",
            "text": "",
            "title": "Revision History"
        },
        {
            "location": "/about/changelog/#101-20160531",
            "text": "Replaced calls to  git remote add origin  with  git remote set-url origin .",
            "title": "1.0.1 (2016/05/31)"
        },
        {
            "location": "/about/changelog/#10-20160522",
            "text": "Initial stable release.",
            "title": "1.0 (2016/05/22)"
        },
        {
            "location": "/about/changelog/#011-20160510",
            "text": "Removed dependency on  sh  to support Cygwin/MinGW/etc. on Windows.  Dropped Python 3.4 support for  subprocess  and  *args  improvements.  BREAKING : Renamed config file key  dir  to  name .",
            "title": "0.11 (2016/05/10)"
        },
        {
            "location": "/about/changelog/#010-20160414",
            "text": "Added  show  command to display dependency and internal paths.",
            "title": "0.10 (2016/04/14)"
        },
        {
            "location": "/about/changelog/#09-20160331",
            "text": "Added  edit  command to launch the configuration file.  Depth now defaults to 5 to prevent infinite recursion.  Fixed handling of source lists containing different dependencies.",
            "title": "0.9 (2016/03/31)"
        },
        {
            "location": "/about/changelog/#083-20160314",
            "text": "Renamed to GitMan.",
            "title": "0.8.3 (2016/03/14)"
        },
        {
            "location": "/about/changelog/#082-20160224",
            "text": "Updated to YORM v0.6.",
            "title": "0.8.2 (2016/02/24)"
        },
        {
            "location": "/about/changelog/#081-20160121",
            "text": "Added an error message when attempting to lock invalid repositories.",
            "title": "0.8.1 (2016/01/21)"
        },
        {
            "location": "/about/changelog/#08-20160113",
            "text": "Switched to using repository mirrors to speed up cloning.  Disabled automatic fetching on install.  Added  --fetch  option on  install  to always fetch.  Now displaying  git status  output when there are changes.",
            "title": "0.8 (2016/01/13)"
        },
        {
            "location": "/about/changelog/#07-20151222",
            "text": "Fixed  git remote rm  command (@hdnivara).  Now applying the  update  dependency filter to locking as well.  Now only locking previous locked dependencies.  Added  lock  command to manually save all dependency versions.  Now requiring  --lock  option on  update  to explicitly lock dependencies.",
            "title": "0.7 (2015/12/22)"
        },
        {
            "location": "/about/changelog/#06-20151113",
            "text": "Added the ability to filter the dependency list on  install  and  update .  Added  --depth  option to limit dependency traversal on  install ,  update , and  list .",
            "title": "0.6 (2015/11/13)"
        },
        {
            "location": "/about/changelog/#05-20151020",
            "text": "Added Git plugin support via:  git deps .  Removed  --no-clean  option (now the default) on  install  and  update .  Added  --clean  option to delete ignored files on  install  and  update .  Switched to  install  rather than  update  of nested dependencies.  Added  --all  option on  update  to update all nested dependencies.  Disabled warnings when running  install  without locked sources.  Added  --no-lock  option to disable version recording.",
            "title": "0.5 (2015/10/20)"
        },
        {
            "location": "/about/changelog/#042-20151018",
            "text": "Fixed crash when running with some sources missing.",
            "title": "0.4.2 (2015/10/18)"
        },
        {
            "location": "/about/changelog/#041-20150924",
            "text": "Switched to cloning for initial working tree creation.",
            "title": "0.4.1 (2015/09/24)"
        },
        {
            "location": "/about/changelog/#04-20150918",
            "text": "Replaced  install  command with  update .  Updated  install  command to use locked dependency versions.  Now sorting sources after a successful  update .  Now requiring  --force  to  uninstall  with uncommitted changes.  Updated  list  command to show full shell commands.",
            "title": "0.4 (2015/09/18)"
        },
        {
            "location": "/about/changelog/#031-20150909",
            "text": "Ensures files are not needlessly reloaded with newer versions of YORM.",
            "title": "0.3.1 (2015/09/09)"
        },
        {
            "location": "/about/changelog/#03-20150626",
            "text": "Added  --no-clean  option to disable removing untracked files.  Added support for  rev-parse  dates as the dependency  rev .",
            "title": "0.3 (2015/06/26)"
        },
        {
            "location": "/about/changelog/#025-20150615",
            "text": "Added  --quiet  option to hide warnings.",
            "title": "0.2.5 (2015/06/15)"
        },
        {
            "location": "/about/changelog/#024-20150519",
            "text": "Now hiding YORM logging bellow warnings.",
            "title": "0.2.4 (2015/05/19)"
        },
        {
            "location": "/about/changelog/#023-20150517",
            "text": "Upgraded to YORM v0.4.",
            "title": "0.2.3 (2015/05/17)"
        },
        {
            "location": "/about/changelog/#022-20150504",
            "text": "Specified YORM < v0.4.",
            "title": "0.2.2 (2015/05/04)"
        },
        {
            "location": "/about/changelog/#021-20150312",
            "text": "Added automatic remote branch tracking in dependencies.  Now requiring  --force  when there are untracked files.",
            "title": "0.2.1 (2015/03/12)"
        },
        {
            "location": "/about/changelog/#02-20150310",
            "text": "Added  list  command to display current URLs/SHAs.",
            "title": "0.2 (2015/03/10)"
        },
        {
            "location": "/about/changelog/#014-20140227",
            "text": "Fixed an outdated index when checking for changes.",
            "title": "0.1.4 (2014/02/27)"
        },
        {
            "location": "/about/changelog/#013-20140227",
            "text": "Fixed extra whitespace when logging shell output.",
            "title": "0.1.3 (2014/02/27)"
        },
        {
            "location": "/about/changelog/#012-20140227",
            "text": "Added  --force  argument to:  overwrite uncommitted changes  create symbolic links in place of directories    Added live shell command output with  -vv  argument.",
            "title": "0.1.2 (2014/02/27)"
        },
        {
            "location": "/about/changelog/#01-20140224",
            "text": "Initial release.",
            "title": "0.1 (2014/02/24)"
        },
        {
            "location": "/about/contributing/",
            "text": "For Contributors\n\n\nSetup\n\n\nRequirements\n\n\n\n\nMake:\n\n\nWindows: http://cygwin.com/install.html\n\n\nMac: https://developer.apple.com/xcode\n\n\nLinux: http://www.gnu.org/software/make (likely already installed)\n\n\n\n\n\n\nvirtualenv: https://pypi.python.org/pypi/virtualenv#installation\n\n\nPandoc: http://johnmacfarlane.net/pandoc/installing.html\n\n\nGraphviz: http://www.graphviz.org/Download.php\n\n\n\n\nInstallation\n\n\nCreate a virtualenv:\n\n\n$ make env\n\n\n\n\nDevelopment\n\n\nTesting\n\n\nManually run the tests:\n\n\n$ make test\n$ make tests  # includes integration tests\n\n\n\n\nor keep them running on change:\n\n\n$ make watch\n\n\n\n\n\n\nIn order to have OS X notifications, \nbrew install terminal-notifier\n.\n\n\n\n\nDocumentation\n\n\nBuild the documentation:\n\n\n$ make doc\n\n\n\n\nStatic Analysis\n\n\nRun linters and static analyzers:\n\n\n$ make pep8\n$ make pep257\n$ make pylint\n$ make check  # includes all checks\n\n\n\n\nRelease\n\n\nRelease to PyPI:\n\n\n$ make upload-test  # dry run upload to a test server\n$ make upload",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#for-contributors",
            "text": "",
            "title": "For Contributors"
        },
        {
            "location": "/about/contributing/#setup",
            "text": "",
            "title": "Setup"
        },
        {
            "location": "/about/contributing/#requirements",
            "text": "Make:  Windows: http://cygwin.com/install.html  Mac: https://developer.apple.com/xcode  Linux: http://www.gnu.org/software/make (likely already installed)    virtualenv: https://pypi.python.org/pypi/virtualenv#installation  Pandoc: http://johnmacfarlane.net/pandoc/installing.html  Graphviz: http://www.graphviz.org/Download.php",
            "title": "Requirements"
        },
        {
            "location": "/about/contributing/#installation",
            "text": "Create a virtualenv:  $ make env",
            "title": "Installation"
        },
        {
            "location": "/about/contributing/#development",
            "text": "",
            "title": "Development"
        },
        {
            "location": "/about/contributing/#testing",
            "text": "Manually run the tests:  $ make test\n$ make tests  # includes integration tests  or keep them running on change:  $ make watch   In order to have OS X notifications,  brew install terminal-notifier .",
            "title": "Testing"
        },
        {
            "location": "/about/contributing/#documentation",
            "text": "Build the documentation:  $ make doc",
            "title": "Documentation"
        },
        {
            "location": "/about/contributing/#static-analysis",
            "text": "Run linters and static analyzers:  $ make pep8\n$ make pep257\n$ make pylint\n$ make check  # includes all checks",
            "title": "Static Analysis"
        },
        {
            "location": "/about/contributing/#release",
            "text": "Release to PyPI:  $ make upload-test  # dry run upload to a test server\n$ make upload",
            "title": "Release"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\nThe MIT License (MIT)\n\n\nCopyright \u00a9 2016, Jace Browning\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "The MIT License (MIT)  Copyright \u00a9 2016, Jace Browning  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "title": "License"
        }
    ]
}